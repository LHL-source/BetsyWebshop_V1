BetsyWebshop
tabel of adress look like this:
adress_id    street          house_nr    city
        1    Escamplaan      20          Den Haag
        2    kalvermarkt      4          Den haag
        3    Gouverneurlaan  104         Den Haag


the table looks this:
user_id     username     adress_id   billing_info
      1     John         2           NL01INGB1234567
      2     David        3           NL02ABNA2345678
      3     Helen        1           NL03RABO345678

I like to fill table Product like this:
product_id, name,   description,   price, amount_in_stock, owner
1         , sweater, red, sweater, 24.99, 2              ,1     (John)  
2         , trouser, red, trouser, 15.50 5              ,3     (Helen)
3         , bike,  , blue, bike,   50.80, 1              ,2     (David)

Begin voorbeeld :Samenhang model :Tag,Product en TagProduct
Model Tag:
Tag_id name
1      blue
2      bike
3      yellow
4      handbag

Model: Product
Product_id name
1          handbag
2          ring
3          diamant
4          car

Model:TagProduct
Product_id    name
1     blue handbag
2     blue ring
3     blue diamant
4     blue car
5     bike handbag
6     bike ring
7     bike diamant
8     bike car 
enz.

Betsy Webshop:
Table Tag:
Tag_id    name
1     red
2     blue
3     sweater
4     trouser
5     bike


table Product:
product_id   name
1    sweater
2    trouser
3    bike

table TagProduct:
tagproduct_id  tag_id  product_id    opm
1              1       1             a)red,sweater
2              1       2             b)red, trouser
3              1       3             c)red, bike

4              2       1             d)blue, sweater
5              2       2             e)blue, trouser
6              2       3             f)blue, bike

7              3       1             g)sweater, sweater
8              3       2             h)sweater, trouser
9              3       3             i)sweater, bike

10             4       1             j)trouser, sweater
11             4       2             k)trouser, trouser
12             4       3             l)trouser, bike

13             5       1             m)bike, sweater
14             5       2             n)bike, trouser
15             5       3             o)bike, bike

Table of TagProducts looks like:
tagproduct_id,  tag_id, product_id
             1,       1,          1



Acoording to vscode
Table TagProduct:
tagproduct_id,  tag_id, product_id
            1,        1,          1
Betsy shop whole assignment:
You need to master the following to complete this assignment:

Writing functions and function arguments;
SQL joins;
Database modelling;

It is time to put all your SQL knowledge to the test. You will design a database for a fictional web marketplace called Betsy. Betsy is a site where people can sell homemade goods. This assignment will test your skills in modelling data as well as using the peewee ORM. The requirements for this assignment can be split into 2 parts: Modelling and Querying.

Modelling

Define your models and initialize the database in models.py

 A key part of the Betsy webshop is the database. At its core are the users and the products they offer:

A user has a name, address data, and billing information.

Each user must be able to own a number of products.

The products must have a name, a description, a price per unit, and a quantity describing the amount in stock.

The price should be stored in a safe way; rounding errors should be impossible.

The tags should not be duplicated.

We want to be able to track the purchases made on the marketplace, therefore a transaction model must exist

You can assume that only users can purchase goods

The transaction model must link a buyer with a purchased product and a quantity of purchased items

As a bonus requirement, you must consider the various constraints for all fields and incorporate these constraints in the data model. 

Querying

In order to manage the database, the webshop must have a number of querying utlities. The scaffolding for the utilities can be found in main.py Extend the methods with the relevant functionality.

In this first iteration of the database we want to be able to:

Search for products based on a term. Searching for 'sweater' should yield all products that have the word 'sweater' in the name. This search should be case-insensitive

View the products of a given user.

View all products for a given tag.

Add a product to a user.

Remove a product from a user.

Update the stock quantity of a product.

Handle a purchase between a buyer and a seller for a given product


Test data
To test if your database and queries are working we want to be able to populate the database with data quickly. 

Add a populate_test_database function that fills the database with example data that works with your queries

Bonus

In the next phase of development, the search functionality of the betsy webshop should be optimized. 

The search should target both the name and description fields.

Additionally the products should be indexed so that the time spent on querying them is minimized.

Finally the search should account for spelling mistakes made by users and return products even if a spelling error is present

the end